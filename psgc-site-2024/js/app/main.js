
const getPlanets = async () => {

    const url = 'https://swapi.co/api/planets/1';
    return await axios.get(url)
}

/*
% https://support.activeprospect.com/hc/en-us/articles/205182725-Generic-POST-instructions-for-LeadConduit
% https://support.activeprospect.com/hc/en-us/articles/209564466-LeadConduit-Inbound-Field-Mapping
% https://support.activeprospect.com/hc/en-us/articles/216009923-LeadConduit-Outbound-Field-Mapping
% https://support.activeprospect.com/hc/en-us/articles/202822955-LeadConduit-Adding-Steps-to-a-Flow
% => https://support.activeprospect.com/hc/en-us/articles/217517686
% => https://support.activeprospect.com/hc/en-us/articles/115000466066
% https://support.activeprospect.com/hc/en-us/articles/217517686-LeadConduit-Response-Parsing-Overview
    ~ reason path
% https://docs.activeprospect.com/leadconduit/reference.html

https://app.leadconduit.com/flows/{{FLOW ID}}/sources/{{SOURCE ID}}/submit

Flow ID — The 24 character flow ID generated by LeadConduit that uniquely identifies the flow receiving your lead.
Source ID — The 24 character source ID generated by LeadConduit that identifies the source of the lead.  
*/
const getLeadConduitRequest = (payload) => {
    //const lcURL = 'https://app.leadconduit.com/flows/5e4d6fc19d696a154eb194fa/sources/5e4d6ebc0522c3d92624257d/submit' // PSG Consulting Standard 'Source'
    const lcURL = 'https://app.leadconduit.com/flows/5e4d6fc19d696a154eb194fa/sources/5e4ed059e165cf3a78424e9b/submit' // PSG Consulting Custom 'Verbose Source'

    return {
        headers: { 
            //'content-type': 'application/x-www-form-urlencoded' 
            'content-type': 'application/json'
        },
        data: payload,
        url: lcURL,
        method: 'POST'
    };
}

const postLead = async () => {
    const personalInfo = {
        first_name: faker.name.firstName(),
        last_name: faker.name.lastName(),
        phone_1: faker.phone.phoneNumber(),
        email: faker.internet.email(),
        address_1: faker.address.streetAddress(),
        address_2: '',
        city: faker.address.city(),
        state: faker.address.stateAbbr(),
        postal_code: faker.address.zipCode(),
        company: {
            //number_employees: getRange('num_employees')
            //number_employees: randInt(1,25)
            number_employees: 25
        }
    }
    const config = getLeadConduitRequest(personalInfo);
    console.log('postLead()', config);
    return await axios(config)
}

const bracketsNumEmployees = [
    '1-10',
    '11-50',
    '51-100',
    '101-200',
    '201+'
];

const getRange = rtype => {
    switch (rtype) {
        case 'num_employees':
            return faker.random.arrayElement(bracketsNumEmployees);
    }
    return 0;
}

const randInt = (min, max) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
